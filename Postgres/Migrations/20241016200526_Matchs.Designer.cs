// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Postgres.Configuration;

#nullable disable

namespace Postgres.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20241016200526_Matchs")]
    partial class Matchs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Postgres.Models.InfoMatch.BaronModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("First")
                        .HasColumnType("boolean");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectivesId")
                        .IsUnique();

                    b.ToTable("Baron");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ChallengesModel", b =>
                {
                    b.Property<long>("ChallengesModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChallengesModelId"));

                    b.Property<long>("AbilityUses")
                        .HasColumnType("bigint");

                    b.Property<long>("AcesBefore15Minutes")
                        .HasColumnType("bigint");

                    b.Property<long>("AlliedJungleMonsterKills")
                        .HasColumnType("bigint");

                    b.Property<long>("BaronTakedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("BlastConeOppositeOpponentCount")
                        .HasColumnType("bigint");

                    b.Property<long>("BountyGold")
                        .HasColumnType("bigint");

                    b.Property<long>("BuffsStolen")
                        .HasColumnType("bigint");

                    b.Property<long>("CompleteSupportQuestInTime")
                        .HasColumnType("bigint");

                    b.Property<long>("ControlWardsPlaced")
                        .HasColumnType("bigint");

                    b.Property<double>("DamagePerMinute")
                        .HasColumnType("double precision");

                    b.Property<double>("DamageTakenOnTeamPercentage")
                        .HasColumnType("double precision");

                    b.Property<long>("DancedWithRiftHerald")
                        .HasColumnType("bigint");

                    b.Property<long>("DeathsByEnemyChamps")
                        .HasColumnType("bigint");

                    b.Property<long>("DodgeSkillShotsSmallWindow")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleAces")
                        .HasColumnType("bigint");

                    b.Property<long>("DragonTakedowns")
                        .HasColumnType("bigint");

                    b.Property<double>("EffectiveHealAndShielding")
                        .HasColumnType("double precision");

                    b.Property<long>("ElderDragonKillsWithOpposingSoul")
                        .HasColumnType("bigint");

                    b.Property<long>("ElderDragonMultikills")
                        .HasColumnType("bigint");

                    b.Property<long>("EnemyChampionImmobilizations")
                        .HasColumnType("bigint");

                    b.Property<long>("EnemyJungleMonsterKills")
                        .HasColumnType("bigint");

                    b.Property<long>("EpicMonsterKillsNearEnemyJungler")
                        .HasColumnType("bigint");

                    b.Property<long>("EpicMonsterKillsWithin30SecondsOfSpawn")
                        .HasColumnType("bigint");

                    b.Property<long>("EpicMonsterSteals")
                        .HasColumnType("bigint");

                    b.Property<long>("EpicMonsterStolenWithoutSmite")
                        .HasColumnType("bigint");

                    b.Property<long>("FirstTurretKilled")
                        .HasColumnType("bigint");

                    b.Property<double?>("FirstTurretKilledTime")
                        .HasColumnType("double precision");

                    b.Property<long>("FistBumpParticipation")
                        .HasColumnType("bigint");

                    b.Property<long>("FlawlessAces")
                        .HasColumnType("bigint");

                    b.Property<long>("FullTeamTakedown")
                        .HasColumnType("bigint");

                    b.Property<double>("GameLength")
                        .HasColumnType("double precision");

                    b.Property<long>("GetTakedownsInAllLanesEarlyJungleAsLaner")
                        .HasColumnType("bigint");

                    b.Property<double>("GoldPerMinute")
                        .HasColumnType("double precision");

                    b.Property<long>("HadOpenNexus")
                        .HasColumnType("bigint");

                    b.Property<long?>("HighestChampionDamage")
                        .HasColumnType("bigint");

                    b.Property<long?>("HighestCrowdControlScore")
                        .HasColumnType("bigint");

                    b.Property<long>("ImmobilizeAndKillWithAlly")
                        .HasColumnType("bigint");

                    b.Property<long>("InfernalScalePickup")
                        .HasColumnType("bigint");

                    b.Property<long>("InitialBuffCount")
                        .HasColumnType("bigint");

                    b.Property<long>("InitialCrabCount")
                        .HasColumnType("bigint");

                    b.Property<long>("JungleCsBefore10Minutes")
                        .HasColumnType("bigint");

                    b.Property<long>("JunglerTakedownsNearDamagedEpicMonster")
                        .HasColumnType("bigint");

                    b.Property<long>("KTurretsDestroyedBeforePlatesFall")
                        .HasColumnType("bigint");

                    b.Property<double>("Kda")
                        .HasColumnType("double precision");

                    b.Property<long>("KillAfterHiddenWithAlly")
                        .HasColumnType("bigint");

                    b.Property<double>("KillParticipation")
                        .HasColumnType("double precision");

                    b.Property<long>("KilledChampTookFullTeamDamageSurvived")
                        .HasColumnType("bigint");

                    b.Property<long>("KillingSprees")
                        .HasColumnType("bigint");

                    b.Property<long>("KillsNearEnemyTurret")
                        .HasColumnType("bigint");

                    b.Property<long>("KillsOnOtherLanesEarlyJungleAsLaner")
                        .HasColumnType("bigint");

                    b.Property<long>("KillsOnRecentlyHealedByAramPack")
                        .HasColumnType("bigint");

                    b.Property<long>("KillsUnderOwnTurret")
                        .HasColumnType("bigint");

                    b.Property<long>("KillsWithHelpFromEpicMonster")
                        .HasColumnType("bigint");

                    b.Property<long>("KnockEnemyIntoTeamAndKill")
                        .HasColumnType("bigint");

                    b.Property<long>("LandSkillShotsEarlyGame")
                        .HasColumnType("bigint");

                    b.Property<long>("LaneMinionsFirst10Minutes")
                        .HasColumnType("bigint");

                    b.Property<long>("LegendaryCount")
                        .HasColumnType("bigint");

                    b.Property<long>("LostAnInhibitor")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxKillDeficit")
                        .HasColumnType("bigint");

                    b.Property<long>("MejaisFullStackInTime")
                        .HasColumnType("bigint");

                    b.Property<long>("MoreEnemyJungleThanOpponent")
                        .HasColumnType("bigint");

                    b.Property<long>("MultiKillOneSpell")
                        .HasColumnType("bigint");

                    b.Property<long>("MultiTurretRiftHeraldCount")
                        .HasColumnType("bigint");

                    b.Property<long>("Multikills")
                        .HasColumnType("bigint");

                    b.Property<long>("MultikillsAfterAggressiveFlash")
                        .HasColumnType("bigint");

                    b.Property<long>("OuterTurretExecutesBefore10Minutes")
                        .HasColumnType("bigint");

                    b.Property<long>("OutnumberedKills")
                        .HasColumnType("bigint");

                    b.Property<long>("OutnumberedNexusKill")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("PerfectDragonSoulsTaken")
                        .HasColumnType("bigint");

                    b.Property<long>("PerfectGame")
                        .HasColumnType("bigint");

                    b.Property<long>("PickKillWithAlly")
                        .HasColumnType("bigint");

                    b.Property<long>("PoroExplosions")
                        .HasColumnType("bigint");

                    b.Property<long>("QuickCleanse")
                        .HasColumnType("bigint");

                    b.Property<long>("QuickFirstTurret")
                        .HasColumnType("bigint");

                    b.Property<long>("QuickSoloKills")
                        .HasColumnType("bigint");

                    b.Property<long>("RiftHeraldTakedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("SaveAllyFromDeath")
                        .HasColumnType("bigint");

                    b.Property<long>("ScuttleCrabKills")
                        .HasColumnType("bigint");

                    b.Property<double?>("ShortestTimeToAceFromFirstTakedown")
                        .HasColumnType("double precision");

                    b.Property<long>("SkillshotsDodged")
                        .HasColumnType("bigint");

                    b.Property<long>("SkillshotsHit")
                        .HasColumnType("bigint");

                    b.Property<long>("SnowballsHit")
                        .HasColumnType("bigint");

                    b.Property<long>("SoloBaronKills")
                        .HasColumnType("bigint");

                    b.Property<long>("SoloKills")
                        .HasColumnType("bigint");

                    b.Property<long>("StealthWardsPlaced")
                        .HasColumnType("bigint");

                    b.Property<long>("SurvivedSingleDigitHpCount")
                        .HasColumnType("bigint");

                    b.Property<long>("SurvivedThreeImmobilizesInFight")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmDefeatAatrox")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmDefeatBriar")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmDefeatMiniBosses")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmEvolveWeapon")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmHave3Passives")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmKillEnemy")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmPickupGold")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmReachLevel50")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmSurvive15Min")
                        .HasColumnType("bigint");

                    b.Property<long>("SwarmWinWith5EvolvedWeapons")
                        .HasColumnType("bigint");

                    b.Property<long>("TakedownOnFirstTurret")
                        .HasColumnType("bigint");

                    b.Property<long>("Takedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("TakedownsAfterGainingLevelAdvantage")
                        .HasColumnType("bigint");

                    b.Property<long>("TakedownsBeforeJungleMinionSpawn")
                        .HasColumnType("bigint");

                    b.Property<long>("TakedownsFirstXMinutes")
                        .HasColumnType("bigint");

                    b.Property<long>("TakedownsInAlcove")
                        .HasColumnType("bigint");

                    b.Property<long>("TakedownsInEnemyFountain")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamBaronKills")
                        .HasColumnType("bigint");

                    b.Property<double>("TeamDamagePercentage")
                        .HasColumnType("double precision");

                    b.Property<long>("TeamElderDragonKills")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamRiftHeraldKills")
                        .HasColumnType("bigint");

                    b.Property<long>("The12AssistStreakCount")
                        .HasColumnType("bigint");

                    b.Property<long>("TookLargeDamageSurvived")
                        .HasColumnType("bigint");

                    b.Property<long>("TurretPlatesTaken")
                        .HasColumnType("bigint");

                    b.Property<long>("TurretTakedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("TurretsTakenWithRiftHerald")
                        .HasColumnType("bigint");

                    b.Property<long>("TwentyMinionsIn3SecondsCount")
                        .HasColumnType("bigint");

                    b.Property<long>("TwoWardsOneSweeperCount")
                        .HasColumnType("bigint");

                    b.Property<long>("UnseenRecalls")
                        .HasColumnType("bigint");

                    b.Property<double>("VisionScorePerMinute")
                        .HasColumnType("double precision");

                    b.Property<long>("VoidMonsterKill")
                        .HasColumnType("bigint");

                    b.Property<long>("WardTakedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("WardTakedownsBefore20M")
                        .HasColumnType("bigint");

                    b.Property<long>("WardsGuarded")
                        .HasColumnType("bigint");

                    b.HasKey("ChallengesModelId");

                    b.HasIndex("ParticipantModelId")
                        .IsUnique();

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ChampionBanedModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChampionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PickTurn")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("ChampionBaned");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ChampionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("First")
                        .HasColumnType("boolean");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectivesId")
                        .IsUnique();

                    b.ToTable("Champion");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.DragonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("First")
                        .HasColumnType("boolean");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectivesId")
                        .IsUnique();

                    b.ToTable("Dragon");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.HordeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("First")
                        .HasColumnType("boolean");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectivesId")
                        .IsUnique();

                    b.ToTable("Horde");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.InfoMatchModel", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<string>("Puuid")
                        .HasColumnType("text");

                    b.Property<long>("InfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("MetadataId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "Puuid");

                    b.HasIndex("InfoId");

                    b.HasIndex("MetadataId");

                    b.ToTable("InfoMatches", (string)null);
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.InfoModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EndOfGameResult")
                        .HasColumnType("text");

                    b.Property<long>("GameCreation")
                        .HasColumnType("bigint");

                    b.Property<long>("GameDuration")
                        .HasColumnType("bigint");

                    b.Property<long>("GameEndTimestamp")
                        .HasColumnType("bigint");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GameStartTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("GameType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("MapId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlatformId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("QueueId")
                        .HasColumnType("bigint");

                    b.Property<string>("TournamentCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Info");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.InhibitorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("First")
                        .HasColumnType("boolean");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectivesId")
                        .IsUnique();

                    b.ToTable("Inhibitor");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ObjectivesModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.PerksModel", b =>
                {
                    b.Property<long>("PerksModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PerksModelId"));

                    b.Property<long>("ParticipantModelId")
                        .HasColumnType("bigint");

                    b.HasKey("PerksModelId");

                    b.HasIndex("ParticipantModelId")
                        .IsUnique();

                    b.ToTable("Perks");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.RiftHeraldModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("First")
                        .HasColumnType("boolean");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectivesId")
                        .IsUnique();

                    b.ToTable("RiftHerald");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.SelectionModel", b =>
                {
                    b.Property<long>("SelectionModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SelectionModelId"));

                    b.Property<long>("Perk")
                        .HasColumnType("bigint");

                    b.Property<long>("StyleModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("Var1")
                        .HasColumnType("bigint");

                    b.Property<long>("Var2")
                        .HasColumnType("bigint");

                    b.Property<long>("Var3")
                        .HasColumnType("bigint");

                    b.HasKey("SelectionModelId");

                    b.HasIndex("StyleModelId");

                    b.ToTable("Selection");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.StatPerksModel", b =>
                {
                    b.Property<long>("StatPerksModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StatPerksModelId"));

                    b.Property<long>("Defense")
                        .HasColumnType("bigint");

                    b.Property<long>("Flex")
                        .HasColumnType("bigint");

                    b.Property<long>("Offense")
                        .HasColumnType("bigint");

                    b.Property<long>("PerksModelId")
                        .HasColumnType("bigint");

                    b.HasKey("StatPerksModelId");

                    b.HasIndex("PerksModelId")
                        .IsUnique();

                    b.ToTable("StatPerks");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.StyleModel", b =>
                {
                    b.Property<long>("StyleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StyleModelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PerksModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("StyleStyle")
                        .HasColumnType("bigint");

                    b.HasKey("StyleModelId");

                    b.HasIndex("PerksModelId");

                    b.ToTable("Style");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.TeamModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("InfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("InfoModelId")
                        .HasColumnType("bigint");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<bool>("Win")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("InfoModelId");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.TowerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("First")
                        .HasColumnType("boolean");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ObjectivesId")
                        .IsUnique();

                    b.ToTable("Tower");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatchTimeLine.InfoMatchTimeLineModel", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<string>("Puuid")
                        .HasColumnType("text");

                    b.Property<long>("InfoTimeLineModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("MetadataModelId")
                        .HasColumnType("bigint");

                    b.HasKey("MatchId", "Puuid");

                    b.HasIndex("InfoTimeLineModelId");

                    b.HasIndex("MetadataModelId");

                    b.ToTable("InfoMatchTimeLines", (string)null);
                });

            modelBuilder.Entity("Postgres.Models.InfoMatchTimeLine.InfoTimeLineModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EndOfGameResult")
                        .HasColumnType("text");

                    b.Property<long>("FrameInterval")
                        .HasColumnType("bigint");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("InfoTimeLine");
                });

            modelBuilder.Entity("Postgres.Models.Match.InfoMatch.LegendaryItemUsedModel", b =>
                {
                    b.Property<long>("LegendaryItemUsedModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LegendaryItemUsedModelId"));

                    b.Property<long>("ChallengesModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("LegendaryItemId")
                        .HasColumnType("bigint");

                    b.HasKey("LegendaryItemUsedModelId");

                    b.HasIndex("ChallengesModelId");

                    b.ToTable("LegendaryItemUsed");
                });

            modelBuilder.Entity("Postgres.Models.Match.InfoMatch.ParticipantModel", b =>
                {
                    b.Property<long>("ParticipantModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ParticipantModelId"));

                    b.Property<long>("AllInPings")
                        .HasColumnType("bigint");

                    b.Property<long>("AssistMePings")
                        .HasColumnType("bigint");

                    b.Property<long>("Assists")
                        .HasColumnType("bigint");

                    b.Property<long>("BaronKills")
                        .HasColumnType("bigint");

                    b.Property<long>("BasicPings")
                        .HasColumnType("bigint");

                    b.Property<long>("BountyLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("ChampExperience")
                        .HasColumnType("bigint");

                    b.Property<long>("ChampLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("ChampionId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChampionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ChampionTransform")
                        .HasColumnType("bigint");

                    b.Property<long>("CommandPings")
                        .HasColumnType("bigint");

                    b.Property<long>("ConsumablesPurchased")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageDealtToBuildings")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageDealtToObjectives")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageDealtToTurrets")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageSelfMitigated")
                        .HasColumnType("bigint");

                    b.Property<long>("DangerPings")
                        .HasColumnType("bigint");

                    b.Property<long>("Deaths")
                        .HasColumnType("bigint");

                    b.Property<long>("DetectorWardsPlaced")
                        .HasColumnType("bigint");

                    b.Property<long>("DoubleKills")
                        .HasColumnType("bigint");

                    b.Property<long>("DragonKills")
                        .HasColumnType("bigint");

                    b.Property<bool>("EligibleForProgression")
                        .HasColumnType("boolean");

                    b.Property<long>("EnemyMissingPings")
                        .HasColumnType("bigint");

                    b.Property<long>("EnemyVisionPings")
                        .HasColumnType("bigint");

                    b.Property<bool>("FirstBloodAssist")
                        .HasColumnType("boolean");

                    b.Property<bool>("FirstBloodKill")
                        .HasColumnType("boolean");

                    b.Property<bool>("FirstTowerAssist")
                        .HasColumnType("boolean");

                    b.Property<bool>("FirstTowerKill")
                        .HasColumnType("boolean");

                    b.Property<bool>("GameEndedInEarlySurrender")
                        .HasColumnType("boolean");

                    b.Property<bool>("GameEndedInSurrender")
                        .HasColumnType("boolean");

                    b.Property<long>("GetBackPings")
                        .HasColumnType("bigint");

                    b.Property<long>("GoldEarned")
                        .HasColumnType("bigint");

                    b.Property<long>("GoldSpent")
                        .HasColumnType("bigint");

                    b.Property<long>("HoldPings")
                        .HasColumnType("bigint");

                    b.Property<string>("IndividualPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("InfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("InfoModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("InhibitorKills")
                        .HasColumnType("bigint");

                    b.Property<long>("InhibitorTakedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("InhibitorsLost")
                        .HasColumnType("bigint");

                    b.Property<long>("Item0")
                        .HasColumnType("bigint");

                    b.Property<long>("Item1")
                        .HasColumnType("bigint");

                    b.Property<long>("Item2")
                        .HasColumnType("bigint");

                    b.Property<long>("Item3")
                        .HasColumnType("bigint");

                    b.Property<long>("Item4")
                        .HasColumnType("bigint");

                    b.Property<long>("Item5")
                        .HasColumnType("bigint");

                    b.Property<long>("Item6")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemsPurchased")
                        .HasColumnType("bigint");

                    b.Property<long>("KillingSprees")
                        .HasColumnType("bigint");

                    b.Property<long>("Kills")
                        .HasColumnType("bigint");

                    b.Property<string>("Lane")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LargestCriticalStrike")
                        .HasColumnType("bigint");

                    b.Property<long>("LargestKillingSpree")
                        .HasColumnType("bigint");

                    b.Property<long>("LargestMultiKill")
                        .HasColumnType("bigint");

                    b.Property<long>("LongestTimeSpentLiving")
                        .HasColumnType("bigint");

                    b.Property<long>("MagicDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("MagicDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("MagicDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<long>("NeedVisionPings")
                        .HasColumnType("bigint");

                    b.Property<long>("NeutralMinionsKilled")
                        .HasColumnType("bigint");

                    b.Property<long>("NexusKills")
                        .HasColumnType("bigint");

                    b.Property<long>("NexusLost")
                        .HasColumnType("bigint");

                    b.Property<long>("NexusTakedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesStolen")
                        .HasColumnType("bigint");

                    b.Property<long>("ObjectivesStolenAssists")
                        .HasColumnType("bigint");

                    b.Property<long>("OnMyWayPings")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long>("PentaKills")
                        .HasColumnType("bigint");

                    b.Property<long>("PhysicalDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("PhysicalDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("PhysicalDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<long>("Placement")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerAugment1")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerAugment2")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerAugment3")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerAugment4")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerAugment5")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerAugment6")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerSubteamId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfileIcon")
                        .HasColumnType("bigint");

                    b.Property<long>("PushPings")
                        .HasColumnType("bigint");

                    b.Property<string>("Puuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("QuadraKills")
                        .HasColumnType("bigint");

                    b.Property<string>("RiotIdGameName")
                        .HasColumnType("text");

                    b.Property<string>("RiotIdTagline")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<long>("SightWardsBoughtInGame")
                        .HasColumnType("bigint");

                    b.Property<long>("Spell1Casts")
                        .HasColumnType("bigint");

                    b.Property<long>("Spell2Casts")
                        .HasColumnType("bigint");

                    b.Property<long>("Spell3Casts")
                        .HasColumnType("bigint");

                    b.Property<long>("Spell4Casts")
                        .HasColumnType("bigint");

                    b.Property<long>("SubteamPlacement")
                        .HasColumnType("bigint");

                    b.Property<long>("Summoner1Casts")
                        .HasColumnType("bigint");

                    b.Property<long>("Summoner1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Summoner2Casts")
                        .HasColumnType("bigint");

                    b.Property<long>("Summoner2Id")
                        .HasColumnType("bigint");

                    b.Property<string>("SummonerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SummonerLevel")
                        .HasColumnType("bigint");

                    b.Property<string>("SummonerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TeamEarlySurrendered")
                        .HasColumnType("boolean");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeamPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TimeCCingOthers")
                        .HasColumnType("bigint");

                    b.Property<long>("TimePlayed")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalAllyJungleMinionsKilled")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDamageShieldedOnTeammates")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalEnemyJungleMinionsKilled")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalHeal")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalHealsOnTeammates")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalMinionsKilled")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTimeCcDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalTimeSpentDead")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalUnitsHealed")
                        .HasColumnType("bigint");

                    b.Property<long>("TripleKills")
                        .HasColumnType("bigint");

                    b.Property<long>("TrueDamageDealt")
                        .HasColumnType("bigint");

                    b.Property<long>("TrueDamageDealtToChampions")
                        .HasColumnType("bigint");

                    b.Property<long>("TrueDamageTaken")
                        .HasColumnType("bigint");

                    b.Property<long>("TurretKills")
                        .HasColumnType("bigint");

                    b.Property<long>("TurretTakedowns")
                        .HasColumnType("bigint");

                    b.Property<long>("TurretsLost")
                        .HasColumnType("bigint");

                    b.Property<long>("UnrealKills")
                        .HasColumnType("bigint");

                    b.Property<long>("VisionClearedPings")
                        .HasColumnType("bigint");

                    b.Property<long>("VisionScore")
                        .HasColumnType("bigint");

                    b.Property<long>("VisionWardsBoughtInGame")
                        .HasColumnType("bigint");

                    b.Property<long>("WardsKilled")
                        .HasColumnType("bigint");

                    b.Property<long>("WardsPlaced")
                        .HasColumnType("bigint");

                    b.Property<bool>("Win")
                        .HasColumnType("boolean");

                    b.HasKey("ParticipantModelId");

                    b.HasIndex("InfoModelId");

                    b.ToTable("Participants", (string)null);
                });

            modelBuilder.Entity("Postgres.Models.Match.InfoMatch.ParticipantsIdModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("MetadataModelInfoMatchModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParticipantsPuuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MetadataModelInfoMatchModelId");

                    b.ToTable("ParticipantsId");
                });

            modelBuilder.Entity("Postgres.Models.Match.MatchModel", b =>
                {
                    b.Property<string>("Puuid")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FormatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TimeLastMatchPlayed")
                        .HasColumnType("bigint");

                    b.HasKey("Puuid", "Id");

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("Postgres.Models.Match.MetadataInfoMatchModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DataVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MetadataInfoMatch");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.AssistingParticipantIdsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssistingParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventModelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventModelId");

                    b.ToTable("AssistingParticipantIds");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.ChampionStatsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AbilityHaste")
                        .HasColumnType("integer");

                    b.Property<int>("AbilityPower")
                        .HasColumnType("integer");

                    b.Property<int>("Armor")
                        .HasColumnType("integer");

                    b.Property<int>("ArmorPen")
                        .HasColumnType("integer");

                    b.Property<int>("ArmorPenPercent")
                        .HasColumnType("integer");

                    b.Property<int>("AttackDamage")
                        .HasColumnType("integer");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("BonusArmorPenPercent")
                        .HasColumnType("integer");

                    b.Property<int>("BonusMagicPenPercent")
                        .HasColumnType("integer");

                    b.Property<int>("CcReduction")
                        .HasColumnType("integer");

                    b.Property<int>("CooldownReduction")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<int>("HealthMax")
                        .HasColumnType("integer");

                    b.Property<int>("HealthRegen")
                        .HasColumnType("integer");

                    b.Property<int>("Lifesteal")
                        .HasColumnType("integer");

                    b.Property<int>("MagicPen")
                        .HasColumnType("integer");

                    b.Property<int>("MagicPenPercent")
                        .HasColumnType("integer");

                    b.Property<int>("MagicResist")
                        .HasColumnType("integer");

                    b.Property<int>("MovementSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("Omnivamp")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("PhysicalVamp")
                        .HasColumnType("integer");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<int>("PowerMax")
                        .HasColumnType("integer");

                    b.Property<int>("PowerRegen")
                        .HasColumnType("integer");

                    b.Property<int>("SpellVamp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChampionStats");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.DamageStatsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("MagicDamageDone")
                        .HasColumnType("integer");

                    b.Property<int>("MagicDamageDoneToChampions")
                        .HasColumnType("integer");

                    b.Property<int>("MagicDamageTaken")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("PhysicalDamageDone")
                        .HasColumnType("integer");

                    b.Property<int>("PhysicalDamageDoneToChampions")
                        .HasColumnType("integer");

                    b.Property<int>("PhysicalDamageTaken")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDamageDone")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDamageDoneToChampions")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDamageTaken")
                        .HasColumnType("integer");

                    b.Property<int>("TrueDamageDone")
                        .HasColumnType("integer");

                    b.Property<int>("TrueDamageDoneToChampions")
                        .HasColumnType("integer");

                    b.Property<int>("TrueDamageTaken")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DamageStats");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.EventModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActualStartTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("AfterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BeforeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Bounty")
                        .HasColumnType("bigint");

                    b.Property<string>("BuildingType")
                        .HasColumnType("text");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("FrameModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GoldGain")
                        .HasColumnType("bigint");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("KillStreakLength")
                        .HasColumnType("bigint");

                    b.Property<string>("KillType")
                        .HasColumnType("text");

                    b.Property<long?>("KillerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("KillerTeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("LaneType")
                        .HasColumnType("text");

                    b.Property<long?>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("LevelUpType")
                        .HasColumnType("text");

                    b.Property<string>("MonsterSubType")
                        .HasColumnType("text");

                    b.Property<string>("MonsterType")
                        .HasColumnType("text");

                    b.Property<long?>("MultiKillLength")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RealTimestamp")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShutdownBounty")
                        .HasColumnType("bigint");

                    b.Property<long?>("SkillSlot")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("TowerType")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long?>("VictimId")
                        .HasColumnType("bigint");

                    b.Property<string>("WardType")
                        .HasColumnType("text");

                    b.Property<long?>("WinningTeam")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FrameModelId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.FrameModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("InfoTimeLineModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InfoTimeLineModelId");

                    b.ToTable("Frame");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.MetadataTimeLineModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DataVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MetadataTimeLine");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.ParticipantFrameModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChampionStatsId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentGold")
                        .HasColumnType("bigint");

                    b.Property<long>("DamageStatsId")
                        .HasColumnType("bigint");

                    b.Property<long>("FrameModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("GoldPerSecond")
                        .HasColumnType("bigint");

                    b.Property<long>("IdParticipantFrame")
                        .HasColumnType("bigint");

                    b.Property<long>("JungleMinionsKilled")
                        .HasColumnType("bigint");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<long>("MinionsKilled")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionParticipantModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeEnemySpentControlled")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalGold")
                        .HasColumnType("bigint");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChampionStatsId");

                    b.HasIndex("DamageStatsId");

                    b.HasIndex("FrameModelId");

                    b.ToTable("ParticipantFrame");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.ParticipantTimeLineModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("InfoTimeLineModelId")
                        .HasColumnType("bigint");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<string>("Puuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InfoTimeLineModelId");

                    b.ToTable("ParticipantTimeLine");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.PositionEventModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EventModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("X")
                        .HasColumnType("bigint");

                    b.Property<long>("Y")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventModelId")
                        .IsUnique();

                    b.ToTable("PositionEvent");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.PositionParticipantModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ParticipantFrameModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("X")
                        .HasColumnType("bigint");

                    b.Property<long>("Y")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantFrameModelId")
                        .IsUnique();

                    b.ToTable("PositionParticipant");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.VictimDamageDealtModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Basic")
                        .HasColumnType("boolean");

                    b.Property<long>("EventModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("MagicDamage")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long>("PhysicalDamage")
                        .HasColumnType("bigint");

                    b.Property<string>("SpellName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SpellSlot")
                        .HasColumnType("bigint");

                    b.Property<long>("TrueDamage")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventModelId");

                    b.ToTable("VictimDamageDealt");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.VictimDamageReceivedModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Basic")
                        .HasColumnType("boolean");

                    b.Property<long>("EventModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("MagicDamage")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long>("PhysicalDamage")
                        .HasColumnType("bigint");

                    b.Property<string>("SpellName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SpellSlot")
                        .HasColumnType("bigint");

                    b.Property<long>("TrueDamage")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventModelId");

                    b.ToTable("VictimDamageReceived");
                });

            modelBuilder.Entity("Postgres.Models.SummonerModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProfileIconId")
                        .HasColumnType("integer");

                    b.Property<string>("Puuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RevisionDate")
                        .HasColumnType("bigint");

                    b.Property<int>("SummonerLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Summoners", (string)null);
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.BaronModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ObjectivesModel", "Objectives")
                        .WithOne("Baron")
                        .HasForeignKey("Postgres.Models.InfoMatch.BaronModel", "ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ChallengesModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.InfoMatch.ParticipantModel", "Participant")
                        .WithOne("Challenges")
                        .HasForeignKey("Postgres.Models.InfoMatch.ChallengesModel", "ParticipantModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ChampionBanedModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.TeamModel", "Team")
                        .WithMany("Bans")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ChampionModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ObjectivesModel", "Objectives")
                        .WithOne("Champion")
                        .HasForeignKey("Postgres.Models.InfoMatch.ChampionModel", "ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.DragonModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ObjectivesModel", "Objectives")
                        .WithOne("Dragon")
                        .HasForeignKey("Postgres.Models.InfoMatch.DragonModel", "ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.HordeModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ObjectivesModel", "Objectives")
                        .WithOne("Horde")
                        .HasForeignKey("Postgres.Models.InfoMatch.HordeModel", "ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.InfoMatchModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.InfoModel", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Postgres.Models.Match.MetadataInfoMatchModel", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.InhibitorModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ObjectivesModel", "Objectives")
                        .WithOne("Inhibitor")
                        .HasForeignKey("Postgres.Models.InfoMatch.InhibitorModel", "ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ObjectivesModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.TeamModel", "Team")
                        .WithOne("Objectives")
                        .HasForeignKey("Postgres.Models.InfoMatch.ObjectivesModel", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.PerksModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.InfoMatch.ParticipantModel", "Participant")
                        .WithOne("Perks")
                        .HasForeignKey("Postgres.Models.InfoMatch.PerksModel", "ParticipantModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.RiftHeraldModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ObjectivesModel", "Objectives")
                        .WithOne("RiftHerald")
                        .HasForeignKey("Postgres.Models.InfoMatch.RiftHeraldModel", "ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.SelectionModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.StyleModel", "Style")
                        .WithMany("Selections")
                        .HasForeignKey("StyleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.StatPerksModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.PerksModel", "Perks")
                        .WithOne("StatPerks")
                        .HasForeignKey("Postgres.Models.InfoMatch.StatPerksModel", "PerksModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perks");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.StyleModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.PerksModel", "Perks")
                        .WithMany("Styles")
                        .HasForeignKey("PerksModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perks");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.TeamModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.InfoModel", "InfoModel")
                        .WithMany("Teams")
                        .HasForeignKey("InfoModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoModel");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.TowerModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ObjectivesModel", "Objectives")
                        .WithOne("Tower")
                        .HasForeignKey("Postgres.Models.InfoMatch.TowerModel", "ObjectivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatchTimeLine.InfoMatchTimeLineModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatchTimeLine.InfoTimeLineModel", "Info")
                        .WithMany("InfoMatchTimeLines")
                        .HasForeignKey("InfoTimeLineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.MetadataTimeLineModel", "Metadata")
                        .WithMany("InfoMatchTimeLines")
                        .HasForeignKey("MetadataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Postgres.Models.Match.InfoMatch.LegendaryItemUsedModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.ChallengesModel", "Challenges")
                        .WithMany("LegendaryItemUsed")
                        .HasForeignKey("ChallengesModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("Postgres.Models.Match.InfoMatch.ParticipantModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatch.InfoModel", "InfoModel")
                        .WithMany("Participants")
                        .HasForeignKey("InfoModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoModel");
                });

            modelBuilder.Entity("Postgres.Models.Match.InfoMatch.ParticipantsIdModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.MetadataInfoMatchModel", "MetadataInfoMatch")
                        .WithMany("Participants")
                        .HasForeignKey("MetadataModelInfoMatchModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataInfoMatch");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.AssistingParticipantIdsModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.EventModel", "Event")
                        .WithMany("AssistingParticipantIds")
                        .HasForeignKey("EventModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.EventModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.FrameModel", "Frame")
                        .WithMany("Events")
                        .HasForeignKey("FrameModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Frame");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.FrameModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatchTimeLine.InfoTimeLineModel", "InfoTimeLine")
                        .WithMany("Frames")
                        .HasForeignKey("InfoTimeLineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoTimeLine");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.ParticipantFrameModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.ChampionStatsModel", "ChampionStats")
                        .WithMany("ParticipantFrames")
                        .HasForeignKey("ChampionStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.DamageStatsModel", "DamageStats")
                        .WithMany("ParticipantFrames")
                        .HasForeignKey("DamageStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.FrameModel", "Frame")
                        .WithMany("ParticipantFrames")
                        .HasForeignKey("FrameModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChampionStats");

                    b.Navigation("DamageStats");

                    b.Navigation("Frame");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.ParticipantTimeLineModel", b =>
                {
                    b.HasOne("Postgres.Models.InfoMatchTimeLine.InfoTimeLineModel", "InfoTimeLine")
                        .WithMany("ParticipantsTimeLine")
                        .HasForeignKey("InfoTimeLineModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InfoTimeLine");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.PositionEventModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.EventModel", "Event")
                        .WithOne("Position")
                        .HasForeignKey("Postgres.Models.Match.infoMatchTimeLine.PositionEventModel", "EventModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.PositionParticipantModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.ParticipantFrameModel", "ParticipantFrame")
                        .WithOne("Position")
                        .HasForeignKey("Postgres.Models.Match.infoMatchTimeLine.PositionParticipantModel", "ParticipantFrameModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParticipantFrame");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.VictimDamageDealtModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.EventModel", "Event")
                        .WithMany("VictimDamageDealt")
                        .HasForeignKey("EventModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.VictimDamageReceivedModel", b =>
                {
                    b.HasOne("Postgres.Models.Match.infoMatchTimeLine.EventModel", "Event")
                        .WithMany("VictimDamageReceived")
                        .HasForeignKey("EventModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ChallengesModel", b =>
                {
                    b.Navigation("LegendaryItemUsed");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.InfoModel", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.ObjectivesModel", b =>
                {
                    b.Navigation("Baron")
                        .IsRequired();

                    b.Navigation("Champion")
                        .IsRequired();

                    b.Navigation("Dragon")
                        .IsRequired();

                    b.Navigation("Horde")
                        .IsRequired();

                    b.Navigation("Inhibitor")
                        .IsRequired();

                    b.Navigation("RiftHerald")
                        .IsRequired();

                    b.Navigation("Tower")
                        .IsRequired();
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.PerksModel", b =>
                {
                    b.Navigation("StatPerks")
                        .IsRequired();

                    b.Navigation("Styles");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.StyleModel", b =>
                {
                    b.Navigation("Selections");
                });

            modelBuilder.Entity("Postgres.Models.InfoMatch.TeamModel", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Objectives")
                        .IsRequired();
                });

            modelBuilder.Entity("Postgres.Models.InfoMatchTimeLine.InfoTimeLineModel", b =>
                {
                    b.Navigation("Frames");

                    b.Navigation("InfoMatchTimeLines");

                    b.Navigation("ParticipantsTimeLine");
                });

            modelBuilder.Entity("Postgres.Models.Match.InfoMatch.ParticipantModel", b =>
                {
                    b.Navigation("Challenges")
                        .IsRequired();

                    b.Navigation("Perks")
                        .IsRequired();
                });

            modelBuilder.Entity("Postgres.Models.Match.MetadataInfoMatchModel", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.ChampionStatsModel", b =>
                {
                    b.Navigation("ParticipantFrames");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.DamageStatsModel", b =>
                {
                    b.Navigation("ParticipantFrames");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.EventModel", b =>
                {
                    b.Navigation("AssistingParticipantIds");

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("VictimDamageDealt");

                    b.Navigation("VictimDamageReceived");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.FrameModel", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("ParticipantFrames");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.MetadataTimeLineModel", b =>
                {
                    b.Navigation("InfoMatchTimeLines");
                });

            modelBuilder.Entity("Postgres.Models.Match.infoMatchTimeLine.ParticipantFrameModel", b =>
                {
                    b.Navigation("Position")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
